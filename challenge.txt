Complete the three following programming problems using the Go programming language. Focus on writing clean, readable code that returns a correct answer. Consider edge cases.

Problem #1.

Define an encoding format that can represent a JSON data structure as an array of single-line strings. Each JSON value primitive (e.g. number, string, boolean, null) should correspond to its own string entry in the output array.
Other than those requirements, your encoding scheme can be anything you want.

Create an `encode` function that takes JSON data input and outputs an array of strings in your encoding format.

Create a `decode` function that takes the string array and transforms it back into the original JSON data structure.

Sample input:
More JSON sample data at: https://git.io/Jvc77

sampleJson = {
  "car": {
    "color": "blue",
    "year": 1999,
    "broken": [
      "left mirror",
      "right door"
    ]
  }
}

Sample output string array (remember this encoding is arbitrary and is up to you.):

encodedSample = [
  'car/color="blue"',
  'car/year=1999',
  'car/broken[0]="left mirror"',
  'car/broken[1]="right door"'
]




Problem #2.

A palindrome is defined as a string or sequence of characters that reads the same forwards and backwards, such as "madam" or "racecar".

Write a program that takes an input called "word" and returns the longest palindromic substring in "word".

Examples:

Input: word = "xoxoy"
Output: "xox"
Explanation: "oxo" is also a valid answer.

Input: word = "fggd"
Output: "gg"




Problem #3.

You are given a very large integer n, represented as a string,​​​​​​ and an integer digit x. The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.

You want to maximize n's numerical value by inserting x anywhere in the decimal representation of n​​​​​​. You cannot insert x to the left of the negative sign.

For example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763.
If n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255.
Return a string representing the maximum value of n​​​​​​ after the insertion.



Example 1:

Input: n = "99", x = 9
Output: "999"
Explanation: The result is the same regardless of where you insert 9.
Example 2:

Input: n = "-13", x = 2
Output: "-123"
Explanation: You can make n one of {-213, -123, -132}, and the largest of those three is -123.


Constraints:

1 <= n.length <= 105
1 <= x <= 9
The digits in n​​​ are in the range [1, 9].
n is a valid representation of an integer.
In the case of a negative n,​​​​​​ it will begin with '-'.